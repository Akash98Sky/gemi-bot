datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

model User {
  objId      String    @id @default(auto()) @map("_id") @db.ObjectId
  id         BigInt    @unique
  username   String
  firstName  String?
  lastName   String?
  chats      Chat[]    @relation(fields: [chatObjIds], references: [objId])
  chatObjIds String[]  @db.ObjectId
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Chat {
  objId      String    @id @default(auto()) @map("_id") @db.ObjectId
  id         BigInt    @unique
  title      String
  users      User[]    @relation(fields: [userObjIds], references: [objId])
  userObjIds String[]  @db.ObjectId
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Message {
  objId         String         @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId      String         @unique // Format "chatId:messageId"
  messageId     Int
  text          String
  textEmbedding Float[]
  chat          Chat           @relation(fields: [chatId], references: [id])
  chatId        BigInt
  user          User?          @relation(fields: [userId], references: [id])
  userId        BigInt?
  createdAt     DateTime       @default(now())
  chatMessage   ChatMessage?
  parentMessage ParentMessage?
}

model ChatMessage {
  objId          String         @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId       String         @unique // Format "chatId:messageId"
  message        Message        @relation(fields: [uniqueId], references: [uniqueId])
  parentUniqueId String?
  parent         ParentMessage? @relation(fields: [parentUniqueId], references: [uniqueId])
}

model ParentMessage {
  objId    String        @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId String        @unique // Format "chatId:messageId"
  message  Message       @relation(fields: [uniqueId], references: [uniqueId])
  children ChatMessage[]
}
